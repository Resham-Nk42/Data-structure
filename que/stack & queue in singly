#include <stdio.h>
#include<stdlib.h>

struct Node
{
int data;
struct Node *next;
};
struct Node *head = NULL;
void push(int val)
{

struct Node *newNode = malloc(sizeof(struct Node));
newNode->data = val;

newNode->next = head;

head = newNode;
}

void pop()
{

struct Node *temp;
if(head == NULL)
printf("Stack is Empty\n");
else
{
printf("Popped element = %d\n", head->data);

temp = head;

head = head->next;

free(temp);
}
}

void display()
{

struct Node *temp = head;

while(temp != NULL)
{
printf("%d->", temp->data);
temp = temp->next;
}
printf("NULL\n");
}

struct node
{
int data;
struct node *next;
};

struct node *front = NULL, *rear = NULL;
void enqueue(int val)
{
struct node *newNode = malloc(sizeof(struct node));
newNode->data = val;
newNode->next = NULL;

if(front == NULL && rear == NULL)

front = rear = newNode;
else
{

rear->next = newNode;

rear = newNode;
}
}

void dequeue()
{

struct node *temp;
if(front == NULL)
printf("Queue is Empty. Unable to perform dequeue\n")
;
else
{


temp = front;

front = front->next;

if(front == NULL)
rear = NULL;

free(temp);
}
}

void printList()
{
struct Node *temp =front;
while(temp)
{
printf("%d->",temp->data);
temp = temp->next;
}
printf("NULL\n");
}

int main(){
    push(10);
    push(20);
    push(30);
    push(40);
    push(50);
    display();
    pop();
    pop();

    enqueue(60);
    enqueue(70);
    enqueue(80);
    enqueue(90);
    enqueue(40);
    enqueue(30);
    printList();
    dequeue();
    dequeue();
    printList();

    return 0;
}
